# Alloy configuration for unified telemetry collection (logs + traces)
alloy:
  configMap:
    content: |
      // Discover Kubernetes pods for log collection
      discovery.kubernetes "pods" {
        role = "pod"
      }

      // Filter and relabel discovered pods
      discovery.relabel "pods" {
        targets = discovery.kubernetes.pods.targets
        
        // Only keep running pods
        rule {
          source_labels = ["__meta_kubernetes_pod_phase"]
          action        = "keep"
          regex         = "Running"
        }
        
        // Skip certain system pods to reduce noise
        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          action        = "drop"
          regex         = "(coredns|local-path-provisioner|metrics-server|traefik|helm-install).*"
        }
        
        // Extract namespace label
        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          target_label  = "namespace"
        }
        
        // Extract pod name
        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          target_label  = "pod"
        }
        
        // Extract container name
        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          target_label  = "container"
        }
        
        // Extract app label if it exists
        rule {
          source_labels = ["__meta_kubernetes_pod_label_app"]
          target_label  = "app"
        }
        
      }

      // Read logs via Kubernetes API (no filesystem paths needed!)
      loki.source.kubernetes "pods" {
        targets    = discovery.relabel.pods.output
        forward_to = [loki.write.default.receiver]
      }

      // Send logs to Loki
      loki.write "default" {
        endpoint {
          url = "http://loki-gateway.monitoring.svc.cluster.local/loki/api/v1/push"
        }
      }

      // OTLP receiver for traces (receives from Go applications)
      otelcol.receiver.otlp "default" {
        grpc {
          endpoint = "0.0.0.0:4317"
        }
        http {
          endpoint = "0.0.0.0:4318"
        }
        
        output {
          traces = [otelcol.exporter.otlp.tempo.input]
        }
      }

      // OTLP exporter to send traces to Tempo
      otelcol.exporter.otlp "tempo" {
        client {
          endpoint = "tempo.monitoring.svc.cluster.local:4317"
          tls {
            insecure = true
          }
        }
      }

  # No filesystem mounting needed for Kubernetes API access
  mounts:
    varlog: false

# Deploy as regular deployment (no filesystem access needed)
controller:
  type: "deployment"

# Service configuration to expose OTLP ports
service:
  enabled: true
  type: ClusterIP
  ports:
    http:
      port: 12345
      targetPort: 12345
      protocol: TCP
    otlp-grpc:
      port: 4317
      targetPort: 4317
      protocol: TCP
    otlp-http:
      port: 4318
      targetPort: 4318
      protocol: TCP

# Service account and RBAC
serviceAccount:
  create: true

rbac:
  create: true

# Resource limits
resources:
  limits:
    cpu: 200m
    memory: 256Mi
  requests:
    cpu: 100m
    memory: 128Mi

# Security context
securityContext:
  privileged: false
  runAsUser: 65534  # Run as non-root user (nobody)
